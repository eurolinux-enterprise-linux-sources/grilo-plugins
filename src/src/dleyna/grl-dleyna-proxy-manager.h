/*
 * Generated by gdbus-codegen 2.50.2. DO NOT EDIT.
 *
 * The license of this code is the same as for the source it was derived from.
 */

#ifndef __GRL_DLEYNA_PROXY_MANAGER_H__
#define __GRL_DLEYNA_PROXY_MANAGER_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for com.intel.dLeynaServer.Manager */

#define GRL_DLEYNA_TYPE_MANAGER (grl_dleyna_manager_get_type ())
#define GRL_DLEYNA_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GRL_DLEYNA_TYPE_MANAGER, GrlDleynaManager))
#define GRL_DLEYNA_IS_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GRL_DLEYNA_TYPE_MANAGER))
#define GRL_DLEYNA_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), GRL_DLEYNA_TYPE_MANAGER, GrlDleynaManagerIface))

struct _GrlDleynaManager;
typedef struct _GrlDleynaManager GrlDleynaManager;
typedef struct _GrlDleynaManagerIface GrlDleynaManagerIface;

struct _GrlDleynaManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_servers) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_get_version) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_prefer_local_addresses) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation,
    gboolean arg_Prefer);

  gboolean (*handle_release) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_rescan) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_set_protocol_info) (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_ProtocolInfo);

  void (*found_server) (
    GrlDleynaManager *object,
    const gchar *arg_Path);

  void (*lost_server) (
    GrlDleynaManager *object,
    const gchar *arg_Path);

};

GType grl_dleyna_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *grl_dleyna_manager_interface_info (void);
guint grl_dleyna_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void grl_dleyna_manager_complete_get_version (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *Version);

void grl_dleyna_manager_complete_release (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

void grl_dleyna_manager_complete_get_servers (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *Servers);

void grl_dleyna_manager_complete_rescan (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

void grl_dleyna_manager_complete_set_protocol_info (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);

void grl_dleyna_manager_complete_prefer_local_addresses (
    GrlDleynaManager *object,
    GDBusMethodInvocation *invocation);



/* D-Bus signal emissions functions: */
void grl_dleyna_manager_emit_found_server (
    GrlDleynaManager *object,
    const gchar *arg_Path);

void grl_dleyna_manager_emit_lost_server (
    GrlDleynaManager *object,
    const gchar *arg_Path);



/* D-Bus method calls: */
void grl_dleyna_manager_call_get_version (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_get_version_finish (
    GrlDleynaManager *proxy,
    gchar **out_Version,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_get_version_sync (
    GrlDleynaManager *proxy,
    gchar **out_Version,
    GCancellable *cancellable,
    GError **error);

void grl_dleyna_manager_call_release (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_release_finish (
    GrlDleynaManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_release_sync (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GError **error);

void grl_dleyna_manager_call_get_servers (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_get_servers_finish (
    GrlDleynaManager *proxy,
    gchar ***out_Servers,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_get_servers_sync (
    GrlDleynaManager *proxy,
    gchar ***out_Servers,
    GCancellable *cancellable,
    GError **error);

void grl_dleyna_manager_call_rescan (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_rescan_finish (
    GrlDleynaManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_rescan_sync (
    GrlDleynaManager *proxy,
    GCancellable *cancellable,
    GError **error);

void grl_dleyna_manager_call_set_protocol_info (
    GrlDleynaManager *proxy,
    const gchar *arg_ProtocolInfo,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_set_protocol_info_finish (
    GrlDleynaManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_set_protocol_info_sync (
    GrlDleynaManager *proxy,
    const gchar *arg_ProtocolInfo,
    GCancellable *cancellable,
    GError **error);

void grl_dleyna_manager_call_prefer_local_addresses (
    GrlDleynaManager *proxy,
    gboolean arg_Prefer,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean grl_dleyna_manager_call_prefer_local_addresses_finish (
    GrlDleynaManager *proxy,
    GAsyncResult *res,
    GError **error);

gboolean grl_dleyna_manager_call_prefer_local_addresses_sync (
    GrlDleynaManager *proxy,
    gboolean arg_Prefer,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define GRL_DLEYNA_TYPE_MANAGER_PROXY (grl_dleyna_manager_proxy_get_type ())
#define GRL_DLEYNA_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GRL_DLEYNA_TYPE_MANAGER_PROXY, GrlDleynaManagerProxy))
#define GRL_DLEYNA_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GRL_DLEYNA_TYPE_MANAGER_PROXY, GrlDleynaManagerProxyClass))
#define GRL_DLEYNA_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GRL_DLEYNA_TYPE_MANAGER_PROXY, GrlDleynaManagerProxyClass))
#define GRL_DLEYNA_IS_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GRL_DLEYNA_TYPE_MANAGER_PROXY))
#define GRL_DLEYNA_IS_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GRL_DLEYNA_TYPE_MANAGER_PROXY))

typedef struct _GrlDleynaManagerProxy GrlDleynaManagerProxy;
typedef struct _GrlDleynaManagerProxyClass GrlDleynaManagerProxyClass;
typedef struct _GrlDleynaManagerProxyPrivate GrlDleynaManagerProxyPrivate;

struct _GrlDleynaManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  GrlDleynaManagerProxyPrivate *priv;
};

struct _GrlDleynaManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType grl_dleyna_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GrlDleynaManagerProxy, g_object_unref)
#endif

void grl_dleyna_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GrlDleynaManager *grl_dleyna_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
GrlDleynaManager *grl_dleyna_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void grl_dleyna_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
GrlDleynaManager *grl_dleyna_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
GrlDleynaManager *grl_dleyna_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define GRL_DLEYNA_TYPE_MANAGER_SKELETON (grl_dleyna_manager_skeleton_get_type ())
#define GRL_DLEYNA_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), GRL_DLEYNA_TYPE_MANAGER_SKELETON, GrlDleynaManagerSkeleton))
#define GRL_DLEYNA_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), GRL_DLEYNA_TYPE_MANAGER_SKELETON, GrlDleynaManagerSkeletonClass))
#define GRL_DLEYNA_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), GRL_DLEYNA_TYPE_MANAGER_SKELETON, GrlDleynaManagerSkeletonClass))
#define GRL_DLEYNA_IS_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), GRL_DLEYNA_TYPE_MANAGER_SKELETON))
#define GRL_DLEYNA_IS_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), GRL_DLEYNA_TYPE_MANAGER_SKELETON))

typedef struct _GrlDleynaManagerSkeleton GrlDleynaManagerSkeleton;
typedef struct _GrlDleynaManagerSkeletonClass GrlDleynaManagerSkeletonClass;
typedef struct _GrlDleynaManagerSkeletonPrivate GrlDleynaManagerSkeletonPrivate;

struct _GrlDleynaManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  GrlDleynaManagerSkeletonPrivate *priv;
};

struct _GrlDleynaManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType grl_dleyna_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (GrlDleynaManagerSkeleton, g_object_unref)
#endif

GrlDleynaManager *grl_dleyna_manager_skeleton_new (void);


G_END_DECLS

#endif /* __GRL_DLEYNA_PROXY_MANAGER_H__ */
